'use client';

import React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Upload, File, AlertCircle, CheckCircle, X, Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';

interface FileUploadProps {
  onUploadComplete?: (result: UploadResult) => void;
  onUploadError?: (error: string) => void;
  className?: string;
}

interface UploadResult {
  fileId: string;
  uploadId: number;
  originalName: string;
  fileName: string;
  fileSize: number;
  uploadedAt: string;
  processResult: {
    totalRows: number;
    validRows: number;
    invalidRows: number;
    hasErrors: boolean;
    errors?: string[];
  };
}

interface UploadingFile {
  file: File;
  progress: number;
  status: 'uploading' | 'processing' | 'completed' | 'error';
  error?: string;
  result?: UploadResult;
}

export function FileUpload({ onUploadComplete, onUploadError, className }: FileUploadProps) {
  const [uploadingFiles, setUploadingFiles] = useState<UploadingFile[]>([]);
  const [dataType, setDataType] = useState<'security_log' | 'compatibility_data'>('security_log');
  const [description, setDescription] = useState('');

  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    const newUploadingFiles = acceptedFiles.map(file => ({
      file,
      progress: 0,
      status: 'uploading' as const,
    }));\n\n    setUploadingFiles(prev => [...prev, ...newUploadingFiles]);\n\n    for (let i = 0; i < acceptedFiles.length; i++) {\n      const file = acceptedFiles[i];\n      const fileIndex = uploadingFiles.length + i;\n\n      try {\n        await uploadFile(file, fileIndex);\n      } catch (error) {\n        console.error('Upload failed:', error);\n      }\n    }\n  }, [uploadingFiles.length, dataType, description]);\n\n  const uploadFile = async (file: File, fileIndex: number) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('dataType', dataType);\n    formData.append('description', description);\n\n    try {\n      // Update status to processing\n      setUploadingFiles(prev => \n        prev.map((f, i) => \n          i === fileIndex ? { ...f, status: 'processing', progress: 50 } : f\n        )\n      );\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.error || 'Upload failed');\n      }\n\n      // Update status to completed\n      setUploadingFiles(prev => \n        prev.map((f, i) => \n          i === fileIndex \n            ? { \n                ...f, \n                status: 'completed', \n                progress: 100, \n                result: result.data \n              } \n            : f\n        )\n      );\n\n      onUploadComplete?.(result.data);\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n      \n      // Update status to error\n      setUploadingFiles(prev => \n        prev.map((f, i) => \n          i === fileIndex \n            ? { \n                ...f, \n                status: 'error', \n                error: errorMessage \n              } \n            : f\n        )\n      );\n\n      onUploadError?.(errorMessage);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setUploadingFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const { getRootProps, getInputProps, isDragActive, isDragReject } = useDropzone({\n    onDrop,\n    accept: {\n      'application/json': ['.json'],\n      'text/csv': ['.csv'],\n      'application/csv': ['.csv'],\n    },\n    maxSize: 50 * 1024 * 1024, // 50MB\n    multiple: true,\n  });\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      <Card>\n        <CardHeader>\n          <CardTitle>Upload Security Logs</CardTitle>\n          <CardDescription>\n            Upload JSON or CSV files containing security tool logs or compatibility data.\n            Maximum file size: 50MB\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Data Type Selection */}\n          <div className=\"space-y-3\">\n            <Label className=\"text-sm font-medium\">Data Type</Label>\n            <RadioGroup\n              value={dataType}\n              onValueChange={(value) => setDataType(value as 'security_log' | 'compatibility_data')}\n              className=\"flex flex-col space-y-2\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"security_log\" id=\"security_log\" />\n                <Label htmlFor=\"security_log\" className=\"text-sm\">\n                  Security Tool Logs\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"compatibility_data\" id=\"compatibility_data\" />\n                <Label htmlFor=\"compatibility_data\" className=\"text-sm\">\n                  Compatibility Data\n                </Label>\n              </div>\n            </RadioGroup>\n          </div>\n\n          {/* Description Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\" className=\"text-sm font-medium\">Description (Optional)</Label>\n            <textarea\n              id=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Brief description of the uploaded data...\"\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              rows={3}\n            />\n          </div>\n\n          {/* Drop Zone */}\n          <div\n            {...getRootProps()}\n            className={cn(\n              'border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors',\n              isDragActive && !isDragReject && 'border-blue-500 bg-blue-50',\n              isDragReject && 'border-red-500 bg-red-50',\n              !isDragActive && 'border-gray-300 hover:border-gray-400'\n            )}\n          >\n            <input {...getInputProps()} />\n            <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n            <div className=\"space-y-2\">\n              <p className=\"text-lg font-medium text-gray-700\">\n                {isDragActive\n                  ? isDragReject\n                    ? 'Invalid file type'\n                    : 'Drop files here'\n                  : 'Drop files here or click to browse'\n                }\n              </p>\n              <p className=\"text-sm text-gray-500\">\n                Supports JSON and CSV files up to 50MB\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Uploading Files */}\n      {uploadingFiles.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Upload Progress</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {uploadingFiles.map((uploadingFile, index) => (\n                <div key={index} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-3\">\n                      <File className=\"h-5 w-5 text-gray-400\" />\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {uploadingFile.file.name}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {formatFileSize(uploadingFile.file.size)}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {uploadingFile.status === 'uploading' && (\n                        <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />\n                      )}\n                      {uploadingFile.status === 'processing' && (\n                        <Loader2 className=\"h-4 w-4 animate-spin text-yellow-500\" />\n                      )}\n                      {uploadingFile.status === 'completed' && (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      )}\n                      {uploadingFile.status === 'error' && (\n                        <AlertCircle className=\"h-4 w-4 text-red-500\" />\n                      )}\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFile(index)}\n                        className=\"h-6 w-6 p-0\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Progress Bar */}\n                  {uploadingFile.status !== 'completed' && uploadingFile.status !== 'error' && (\n                    <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n                      <div\n                        className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${uploadingFile.progress}%` }}\n                      />\n                    </div>\n                  )}\n\n                  {/* Status Message */}\n                  <div className=\"text-xs text-gray-600\">\n                    {uploadingFile.status === 'uploading' && 'Uploading...'}\n                    {uploadingFile.status === 'processing' && 'Processing file...'}\n                    {uploadingFile.status === 'completed' && uploadingFile.result && (\n                      <div className=\"space-y-1\">\n                        <p className=\"text-green-600 font-medium\">Upload completed successfully!</p>\n                        <p>Total rows: {uploadingFile.result.processResult.totalRows}</p>\n                        <p>Valid rows: {uploadingFile.result.processResult.validRows}</p>\n                        {uploadingFile.result.processResult.invalidRows > 0 && (\n                          <p className=\"text-yellow-600\">\n                            Invalid rows: {uploadingFile.result.processResult.invalidRows}\n                          </p>\n                        )}\n                        {uploadingFile.result.processResult.hasErrors && (\n                          <div className=\"mt-2\">\n                            <p className=\"text-red-600 font-medium\">Validation Issues:</p>\n                            <ul className=\"text-red-600 text-xs list-disc list-inside\">\n                              {uploadingFile.result.processResult.errors?.slice(0, 3).map((error, idx) => (\n                                <li key={idx}>{error}</li>\n                              ))}\n                              {uploadingFile.result.processResult.errors && \n                               uploadingFile.result.processResult.errors.length > 3 && (\n                                <li>...and {uploadingFile.result.processResult.errors.length - 3} more</li>\n                              )}\n                            </ul>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                    {uploadingFile.status === 'error' && (\n                      <p className=\"text-red-600 font-medium\">\n                        Error: {uploadingFile.error}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}