apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: appcompatcheck
  labels:
    app: appcompatcheck
    component: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: appcompatcheck
      component: postgres
  template:
    metadata:
      labels:
        app: appcompatcheck
        component: postgres
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:16-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "appcompatcheck"
        - name: POSTGRES_USER
          value: "appcompat"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: appcompatcheck-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - appcompat
            - -d
            - appcompatcheck
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - appcompat
            - -d
            - appcompatcheck
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: postgres-init
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      labels:
        app: appcompatcheck
        component: postgres
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: fast-ssd

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: appcompatcheck
  labels:
    app: appcompatcheck
    component: postgres
data:
  postgresql.conf: |
    # Memory Configuration
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 16MB
    maintenance_work_mem = 64MB
    
    # Connection Configuration
    max_connections = 100
    
    # Write Ahead Log Configuration
    wal_level = replica
    max_wal_size = 1GB
    min_wal_size = 80MB
    checkpoint_completion_target = 0.9
    
    # Query Planner Configuration
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging Configuration
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    log_error_verbosity = default
    
    # Performance Monitoring
    track_activities = on
    track_counts = on
    track_io_timing = on
    track_functions = all
    
    # Auto Vacuum Configuration
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 1min
    autovacuum_vacuum_threshold = 50
    autovacuum_analyze_threshold = 50
    autovacuum_vacuum_scale_factor = 0.2
    autovacuum_analyze_scale_factor = 0.1

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: appcompatcheck
  labels:
    app: appcompatcheck
    component: postgres
data:
  01-extensions.sql: |
    -- Create necessary extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
  02-performance.sql: |
    -- Performance monitoring views
    CREATE OR REPLACE VIEW pg_slow_queries AS
    SELECT 
      query,
      calls,
      total_time,
      mean_time,
      rows,
      100.0 * shared_blks_hit / nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
    FROM pg_stat_statements
    ORDER BY total_time DESC;
    
  03-maintenance.sql: |
    -- Maintenance functions
    CREATE OR REPLACE FUNCTION cleanup_old_sessions()
    RETURNS void AS $$
    BEGIN
      DELETE FROM sessions WHERE expires_at < NOW() - INTERVAL '7 days';
    END;
    $$ LANGUAGE plpgsql;